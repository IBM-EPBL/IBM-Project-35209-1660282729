app/urls.py:
from django.urls import path
from .views import home_view, extract_view, result_view

app_name = "app"

urlpatterns = [
    path('', home_view, name="home-view"),
    path('extract/', extract_view, name="extract-view"),
    path('result/<str:value>/<str:accuracy>/', result_view, name="result-view"),
]
app/views.py:
from django.shortcuts import render
from django.http import HttpResponse, HttpResponseRedirect
from django.urls import reverse
from .forms import PhotoForm
from .recognizer import recognize
from django.contrib.auth.decorators import login_required

# Create your views here.

def home_view(request, *args, **kwargs):
    context = {}
    return render(request, "app/home.html", context)

@login_required
def extract_view(request, *args, **kwargs):
    my_form = PhotoForm()
    context = {
        "form": my_form,
    }
    if request.method =="GET":
        pred = ()

    if request.method == "POST":
        img = request.FILES.get('photo')
        pred, others, img_name = recognize(img)
        return HttpResponseRedirect(reverse("app:result-view", kwargs={"value": str(pred[0]), "accuracy": str(pred[1])}))
        # 

    return render(request, "app/extract.html", context)

@login_required
def result_view(request, *args, **kwargs):
    print(request.path)
    var = request.path
    l = var.split("/")
    print(l)
    value = l[2]
    accuracy = l[3]
    return render(request, "app/result.html", { "val": value, "acc": accuracy})

app/recognizer.py:
import os
import random
import string
from pathlib import Path
import numpy as np
from keras.models import load_model
from PIL import Image, ImageOps


def random_name_generator(n):
	return ''.join(random.choices(string.ascii_uppercase + string.digits, k=n))

def recognize(image):
	model=load_model(Path("./model/model.h5"))

	img = Image.open(image).convert("L")
	img_name = random_name_generator(10) + '.jpg'
 
	if not os.path.exists(f"./static/data/"): 
		os.mkdir(os.path.join('./static/', 'data'))
	img.save(Path(f"./static/data/{img_name}"))

	img = ImageOps.grayscale(img)
	img = ImageOps.invert(img)
	img = img.resize((28, 28))

	img2arr = np.array(img)
	img2arr = img2arr / 255.0
	img2arr = img2arr.reshape(1, 28, 28, 1)
 
	results  = model.predict(img2arr)
	best = np.argmax(results,axis = 1)[0]
 
	pred = list(map(lambda x: round(x*100, 2), results[0]))
 
	values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
	others = list(zip(values, pred))

	best = others.pop(best)

	return best, others, img_name

accounts/urls.py:
from django.urls import path
from.views import register_view, login_view, logout_view

app_name = "accounts"

urlpatterns = [
    path('register/', register_view, name = "register"),
    path('login/', login_view, name = "login"),
    path('logout/', logout_view, name = "logout"),

]
accounts/views.py:
from django.http import HttpResponseRedirect
from django.shortcuts import redirect, render
from django.contrib.auth.forms import AuthenticationForm, UserCreationForm
from django.contrib.auth import authenticate, login, logout, get_user_model
from django.urls import reverse

from .forms import LoginForm, RegisterForm

User = get_user_model()

def register_view(request):
    form = RegisterForm(request.POST or None)
    if form.is_valid():
        username = form.cleaned_data.get("username")
        email = form.cleaned_data.get("email")
        password = form.cleaned_data.get("password1")
        try:
            user = User.objects.create_user(username, email, password)
        except:
            user = None
        if user != None:
            return HttpResponseRedirect(reverse('accounts:login'))
    context = {
        "form": form
    }
    return render(request, "accounts/registration.html", context)

def login_view(request):
    form = LoginForm(request.POST or None)
    if form.is_valid():
        username = form.cleaned_data.get("username")
        password = form.cleaned_data.get("password")
        user = authenticate(request, username=username, password=password)
        if user != None:
            login(request, user)
            return HttpResponseRedirect(reverse('app:home-view'))
    context = {
        "form": form
    }
    return render(request, "accounts/login.html", context)

def logout_view(request):
    logout(request)
    return HttpResponseRedirect(reverse('accounts:login'))

hdr/urls.py:
from django.contrib import admin
from django.conf import settings
from django.urls import path, include
from django.conf.urls.static import static
#helo


urlpatterns = [
    path('', include("app.urls")),
    path('admin/', admin.site.urls), 
    path('accounts/', include("accounts.urls")),
]

urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

hdr/settings.py:
from pathlib import Path
import os

LOGIN_URL = "/accounts/login"

BASE_DIR = Path(__file__).resolve().parent.parent



SECRET_KEY = 'django-insecure-ah3f3p)q&k@)3pt((f*n&z-)d=+pwn!87k$ga$*wq3(f0!qg*+'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'crispy_forms',
    'accounts',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hdr.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR /'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hdr.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = 'static/'

STATIC_ROOT = "/var/www/example.com/static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
    '/var/www/static/',
]

MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

templates/accounts/login.html:
{% extends 'base.html' %} {% block content %} {% load crispy_forms_tags %}
<div class="container ml-auto col-md-3 mt-5">
    <div class="card shadow-lg p-3 mb-5 bg-body rounded p-3">
        <div class="text-center mx-5 my-2">
            <h3>Enter Credentials to Login</h3>
        </div>
        <form method="POST">
            {% csrf_token %}
            {{ form.username|as_crispy_field }}
            {{ form.password|as_crispy_field }}
            <div class="text-end">
                <button class="btn btn-success mt-3" type="submit">Signin</button>
            </div>
        </form>
        <div class="text-end">
            <p class="mt-2">
                Don't have an account?
                <a href="{% url 'accounts:register' %}">signup</a>
            </p>
        </div>
    </div>
</div>
{% endblock content %}

templates/accounts/registration.html:
{% extends 'base.html' %} {% block content %} {% load crispy_forms_tags %}

<div class="container ml-auto col-md-3 mt-5">
    <div class="card shadow-lg p-3 mb-5 bg-body rounded p-3">
        <div class="text-center mx-5 my-2">
            <h3>Enter Credentials to Signup</h3>
        </div>
        <form method="POST">
            {% csrf_token %}
            {{ form.username|as_crispy_field }}
            {{ form.email|as_crispy_field }}
            {{ form.password1|as_crispy_field }}
            {{ form.password2|as_crispy_field }}
            <div class="float-end mt-3">
                <button class="btn btn-success" type="submit">Signup</button>
            </div>
        </form>
    <div class="text-end mt-3">
        <p>
            Already have an account? <a href="{% url 'accounts:login' %}">Signin</a>
        </p>
    </div>
</div>
</div>
{% endblock content %}


templates/app/home.html:
{% extends 'base.html' %}

{% block content %}
<div class="container text-center" style=" display: flex; justify-content: center; align-items: center; width: 1920px; height: 650px;">
    <h1 style="font-size: 4em;">A Novel Method for Handwritten Digit Recognition System</h1>
</div>

{% endblock content %}

templates/app/extract.html:
{% extends 'base.html' %}
{% load crispy_forms_tags %}
{% block content %}
{% comment %} <div class="container text-center" style="padding: 100px; padding-bottom: 0px margin-top: 230px; margin-bottom: 0px justify-content: center; align-items: center; width: 800px; height: 400px;"> {% endcomment %}
<div class="container col-md-3 text-center" style="align-items: center; justify-content: center; ">
    {% comment %} <h1 class="my-5" style="font-size: 3em;">Upload an image to Convert !!!</h1>
    <form method="POST" enctype="multipart/form-data"> {% csrf_token %}
        <div class="input-group">
            <input type="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
            <button class="btn btn-outline-secondary" type="submit" id="inputGroupFileAddon04">Button</button>
        </div>
    </form> {% endcomment %}

    <h1 class="my-5" style="font-size: 3em;">Upload an image to Convert !!!</h1>
    <form action="./" method="POST" enctype="multipart/form-data" class="row row-cols-lg-auto align-items-center"> {% csrf_token %}
            {{ form.photo.label_tag }}
            {{ form.photo|as_crispy_field }}
            <button type="submit" class="btn btn-primary">Recognize</button>
    </form>


</div>
{% endblock content %}

templates/app/result.html:
{% extends 'base.html' %}
{% block content %}
<div class="my-5 container col-md-3 text-center" style="align-items: center; justify-content: center; ">
    <h1>Value: {{ val }}</h1>
    <h1>Accuracy: {{ acc }}</h1>
    <a href="{% url 'app:extract-view' %}"><button class="btn btn-primary mt-3">Back</button></a>
</div>
{% endblock content %}

model building code:
model = Sequential()
model.add(Conv2D(64,(3,3),
            input_shape=(28,28,1),
            activation="relu"))
model.add(Conv2D(32,(3,3),
            activation="relu"))
model.add(MaxPooling2D((2,2)))
model.add(Flatten())
model.add(Dense(number_of_classes,
                    activation="softmax"))
model.compile(loss="categorical_crossentropy",
                optimizer="Adam",
                metrics=["accuracy"])
model.fit(X_train,y_train,
            epochs=20,
            validation_data=(X_test,y_test),
            batch_size=32)
metrics=model.evaluate(X_test,y_test,verbose=0)
print("Metrics(Test Loss & Test Accuracy):")
print(metrics)
prediction = model.predict(X_test[:4])
print(prediction)
model.save("model.h5")